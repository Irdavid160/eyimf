[
  <!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Ministry Report • EYIMF</title>
  <link rel="icon" href="assets/favicon.png" />
  <link rel="stylesheet" href="style.css?v=ministry-report-summary-1" />
  <style>
    .report-actions{display:flex;gap:8px;align-items:center;margin-bottom:12px}
    .summary-row { display:flex; gap:12px; flex-wrap:wrap; margin-top:12px; }
    .summary-card { background:#fff; border:1px solid #e6e6e6; padding:12px; border-radius:6px; min-width:240px; flex:1; box-shadow:0 1px 0 rgba(0,0,0,0.03); }
    .summary-card h3 { margin:0 0 8px 0; font-size:1rem; }
    .summary-card .cat { display:flex; justify-content:space-between; padding:4px 0; border-bottom:1px dashed #f1f1f1; }
    .summary-card .cat:last-child { border-bottom:0; }
    .tally-table { width:100%; max-width:100%; border-collapse:collapse; margin-top:12px; }
    .tally-table th, .tally-table td { border:1px solid #eee; padding:6px 8px; text-align:right; }
    .tally-table th { background:#fafafa; text-align:center; font-weight:600; }
    .tally-table td.left { text-align:left; }
    @media print{ .navlinks,.footer,.report-actions{display:none} body{background:#fff} }
  </style>
</head>
<body>
  <nav>
    <div class="container navbar">
      <div class="brand">
        <span class="name">Examine Yourselves International Mission Foundation</span>
      </div>
      <div class="navlinks">
        <a href="index.html">Home</a>
        <a href="about.html">About</a>
        <a href="updates.html">Updates</a>
        <a href="whatwedo.html">What We Do</a>
        <a href="contact.html" class="cta">Contact</a>
      </div>
    </div>
  </nav>

  <main class="section">
    <div class="container">
      <div style="display:flex;justify-content:space-between;align-items:center;gap:12px;flex-wrap:wrap;">
        <h1>Ministry Report</h1>
        <div class="report-actions">
          <label for="month-select">Month:</label>
          <input id="month-select" type="month" aria-label="Select month" />
          <button id="btn-load-month">Load</button>
          <button id="btn-print">Print</button>
          <button id="btn-download-csv">Download CSV</button>
        </div>
      </div>

      <!-- Summary row: This Week | Month total | Year to date -->
      <div id="summary-row" class="summary-row" aria-live="polite"></div>

      <!-- Detailed monthly tally (optional) -->
      <div id="report-container" style="margin-top:12px;">
        <p class="no-report">Loading the latest ministry report…</p>
      </div>

      <p style="margin-top:16px;">
        Manage reports with the <a href="report-editor.html">Report Editor</a>. Reports are read from <code>assets/reports/reports.json</code>.
      </p>
    </div>
  </main>

  <footer class="footer" id="contact">
    <div class="container">
      <div style="display:flex;justify-content:space-between;gap:20px;flex-wrap:wrap;">
        <div><strong>Examine Yourselves International Mission Foundation</strong><br>
          Email: <a href="mailto:info@eyimf.org">info@eyimf.org</a></div>
        <div><div>“Serving souls, meeting needs, glorifying Christ.”</div>
          <div style="margin-top:8px;">KJV — James 2:15–17</div></div>
      </div>
      <div style="margin-top:16px;opacity:.8">© <span id="yr"></span> EYIMF</div>
    </div>
    <script>document.getElementById('yr').textContent=new Date().getFullYear()</script>
  </footer>

<script>
(function(){
  // Categories to show on cards and table
  const CATEGORIES = [
    { key: 'adultAttendance', label: "Adults", type: 'int' },
    { key: 'childrenAttendance', label: "Children", type: 'int' },
    { key: 'teenAttendance', label: "Teens", type: 'int' },
    { key: 'confessions', label: "Confessions", type: 'int' },
    { key: 'baptisms', label: "Baptisms", type: 'int' },
    { key: 'foodPacks', label: "Food packs", type: 'int' },
    { key: 'donations', label: "Donations (USD)", type: 'money' },
    { key: 'expenses', label: "Expenses (USD)", type: 'money' }
  ];

  const summaryRow = document.getElementById('summary-row');
  const container = document.getElementById('report-container');
  const monthInput = document.getElementById('month-select');
  const btnLoad = document.getElementById('btn-load-month');
  const btnCSV = document.getElementById('btn-download-csv');
  const btnPrint = document.getElementById('btn-print');

  function monthKey(d){ return (d||'').slice(0,7); } // YYYY-MM-DD -> YYYY-MM
  function yearKey(d){ return (d||'').slice(0,4); }  // YYYY-MM-DD -> YYYY
  function fmtInt(n){ return Number(n||0).toLocaleString(); }
  function fmtMoney(n){ return (Number(n||0)).toLocaleString(undefined,{minimumFractionDigits:2,maximumFractionDigits:2}); }

  function fetchReports(){
    return fetch('assets/reports/reports.json?v=1').then(r=> r.ok ? r.json() : []).catch(()=>[]);
  }

  function computeTotalsForReports(reports){
    const totals = {};
    CATEGORIES.forEach(c => totals[c.key] = 0);
    for(const r of reports){
      CATEGORIES.forEach(c=>{
        const v = r[c.key];
        if(c.type === 'money') totals[c.key] += parseFloat(v||0);
        else totals[c.key] += Number(v||0);
      });
    }
    return totals;
  }

  function buildCardHtml(title, values){
    let html = `<div class="summary-card"><h3>${title}</h3>`;
    CATEGORIES.forEach(c=>{
      const raw = values && values[c.key] !== undefined ? values[c.key] : 0;
      const display = c.type === 'money' ? fmtMoney(raw) : fmtInt(raw);
      html += `<div class="cat"><div>${c.label}</div><div><strong>${display}</strong></div></div>`;
    });
    html += `</div>`;
    return html;
  }

  // Render three cards: This Week (latest), Month (selected or latest), YTD (year of selected/latest)
  function renderSummary(reports, selectedMonth){
    if(!Array.isArray(reports)) reports = [];
    // find latest by date
    const sorted = reports.slice().filter(r=>r.date).sort((a,b)=>(a.date||'') < (b.date||'') ? 1 : -1);
    const latest = sorted[0] || null;

    const monthToUse = selectedMonth || (latest ? monthKey(latest.date) : '');
    const yearToUse = monthToUse ? monthToUse.slice(0,4) : (latest ? yearKey(latest.date) : (new Date()).getFullYear().toString());

    // this week values = latest
    const weekValues = {};
    CATEGORIES.forEach(c => weekValues[c.key] = latest && latest[c.key] !== undefined ? (c.type==='money'?parseFloat(latest[c.key]||0):Number(latest[c.key]||0)) : 0);

    // month totals
    const monthReports = reports.filter(r => r.date && monthKey(r.date) === monthToUse);
    const monthTotals = computeTotalsForReports(monthReports);

    // year-to-date totals (all reports in that year up to today)
    const yearReports = reports.filter(r => r.date && yearKey(r.date) === yearToUse);
    const ytdTotals = computeTotalsForReports(yearReports);

    // build cards HTML
    let html = '';
    html += buildCardHtml(latest ? `This week (${latest.weekLabel||latest.date})` : 'This week (none)', weekValues);
    html += buildCardHtml(monthToUse ? `Month (${monthToUse})` : 'Month (none)', monthTotals);
    html += buildCardHtml(`Year-to-date (${yearToUse})`, ytdTotals);

    summaryRow.innerHTML = html;

    // also show a compact monthly table with weekly columns (optional)
    renderMonthlyTable(monthReports, monthToUse);
  }

  function renderMonthlyTable(monthReports, monthKey){
    if(!monthKey){
      container.innerHTML = '<p class="no-report">Select a month (or load latest) to see the monthly breakdown.</p>';
      return;
    }
    if(!monthReports.length){
      container.innerHTML = `<p class="no-report">No reports found for ${monthKey}.</p>`;
      return;
    }

    // header: weeks
    const weekLabels = monthReports.map(r => r.weekLabel || r.date);
    const matrix = {};
    CATEGORIES.forEach(c => matrix[c.key] = monthReports.map(r => r[c.key] !== undefined ? (c.type==='money' ? parseFloat(r[c.key]||0) : Number(r[c.key]||0)) : 0));
    const totals = computeTotalsForReports(monthReports);

    let table = `<table class="tally-table"><thead><tr><th class="left">Category</th>`;
    weekLabels.forEach(w => table += `<th>${escapeHtml(w)}</th>`);
    table += `<th>Monthly Total</th></tr></thead><tbody>`;

    CATEGORIES.forEach(c => {
      table += `<tr><td class="left">${c.label}</td>`;
      matrix[c.key].forEach(v => table += `<td>${c.type==='money'?fmtMoney(v):fmtInt(v)}</td>`);
      table += `<td><strong>${c.type==='money'?fmtMoney(totals[c.key]):fmtInt(totals[c.key])}</strong></td></tr>`;
    });

    table += `</tbody></table>`;
    container.innerHTML = `<h2>Monthly breakdown — ${monthKey}</h2>` + table;
  }

  function escapeHtml(s){ if(!s) return ''; return String(s).replace(/[&<>"']/g, m=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m])); }

  // initial fetch and render (defaults to latest week/month/year)
  fetchReports().then(reports=>{
    if(!Array.isArray(reports) || !reports.length){
      summaryRow.innerHTML = '<div class="summary-card"><h3>No data</h3><div>No reports available in assets/reports/reports.json.</div></div>';
      container.innerHTML = '<p class="no-report">No reports found.</p>';
      return;
    }
    // set month input to latest month
    const sorted = reports.slice().filter(r=>r.date).sort((a,b)=>(a.date||'') < (b.date||'') ? 1 : -1);
    const latest = sorted[0];
    if(latest && latest.date) monthInput.value = monthKey(latest.date);

    renderSummary(reports, monthInput.value ? monthInput.value.slice(0,7) : null);
  });

  // event handlers
  btnLoad.addEventListener('click', ()=>{
    const m = (monthInput.value || '').slice(0,7);
    if(!m){ alert('Select a month'); return; }
    fetchReports().then(reports => renderSummary(reports, m));
  });

  btnCSV.addEventListener('click', ()=>{
    const m = (monthInput.value || '').slice(0,7);
    fetchReports().then(reports=>{
      const filtered = m ? reports.filter(r => monthKey(r.date) === m) : reports;
      if(!filtered.length){ alert('No reports for that month'); return; }
      const keys = ['weekLabel','date','adultAttendance','childrenAttendance','teenAttendance','confessions','baptisms','foodPacks','donations','expenses','notes'];
      const lines = [keys.join(',')];
      for(const r of filtered){
        lines.push(keys.map(k=>`"${String(r[k]||'').replace(/"/g,'""')}"`).join(','));
      }
      const blob = new Blob([lines.join('\n')], {type:'text/csv'});
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a'); a.href = url; a.download = `reports_${m||'all'}.csv`; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
    });
  });

  btnPrint.addEventListener('click', ()=> window.print());

})();
</script>
</body>
</html>
]
